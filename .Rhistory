gene_symbol = "GeneSymbol",
gene_name = "Gene Name") # Rename columns to similiar column names as in proteome_data
# There is no NA numbers
colSums(is.na(PAM50_clean))
## Clean proteome data
# identify patient_ID replicates
replicates <- colnames(proteome_data) %>%
str_replace_all(., '\\..*', '') %>% # Simplify ID name
duplicated() %>% # Find replicates (true/false)
colnames(proteome_data)[.] # Extract replicate column names (excluding first apperance)
proteome_data_clean <- proteome_data %>%
select(-gene_symbol, -gene_name) %>% # Remove redundant columns
select(-replicates)  %>% # Remove replicate columns
semi_join(., PAM50_clean, by = "RefSeq_accession_number") %>% # Remove non-PAM50 proteins
rename_all(funs(stringr::str_replace_all(., '\\..*', ''))) %>% # Simplify ID name
pivot_longer(cols = -c("RefSeq_accession_number"),
names_to = "patient_ID",
values_to = "value") %>% # Make proteins (variables) the columns
pivot_wider(names_from = "RefSeq_accession_number",
values_from = "value") #%>% # Make patient_ID (observations) the rows
mutate(patient_ID = factor(patient_ID)) # Factor ID (? I dunno why, did it because Leon does it)
# Should NAs be replaced with zeroes? Or maybe estimate them with median values?
colSums(is.na(proteome_data_clean))
## Clean clinical data
clinical_data_clean <- clinical_data %>%
mutate(patient_ID = str_remove_all(.$`Complete TCGA ID`, "TCGA-")) %>% # Simplify ID name
select(-`Complete TCGA ID`) %>% # Remove old ID column
semi_join(., proteome_data_clean, by = "patient_ID") %>% # Remove clinical data with no protein information
select(patient_ID, everything()) # ID column first
clinical_data_clean <- gsub(" ", "_", names(clinical_data_clean)) # Remove whitespaces in column names
# There is only NA values in days to date of death for living people
colSums(is.na(clinical_data_clean))
### should we join tables? only if it make sense later...
joined_data <- left_join(clinical_data_clean, proteome_data_clean, by="patient_ID")
## Clean clinical data
clinical_data_clean <- clinical_data %>%
mutate(patient_ID = str_remove_all(.$`Complete TCGA ID`, "TCGA-")) %>% # Simplify ID name
select(-`Complete TCGA ID`) %>% # Remove old ID column
semi_join(., proteome_data_clean, by = "patient_ID") %>% # Remove clinical data with no protein information
select(patient_ID, everything()) # ID column first
names(clinical_data_clean) <- gsub(" ", "_", names(clinical_data_clean)) # Remove whitespaces in column names
# There is only NA values in days to date of death for living people
colSums(is.na(clinical_data_clean))
### should we join tables? only if it make sense later...
joined_data <- left_join(clinical_data_clean, proteome_data_clean, by="patient_ID")
# Write data
# ------------------------------------------------------------------------------
write_csv(x = clinical_data_clean,
path = "data/02_clincal_data_clean.csv")
write_csv(x = PAM50_clean,
path = "data/02_PAM50_clean.csv")
write_csv(x = proteome_data_clean,
path = "data/02_proteome_data_clean.csv")
write_csv(x = joined_data,
path = "data/02_joined_data_clean.csv")
# Load data
# ------------------------------------------------------------------------------
clincal_data_aug <- read_csv(file = "data/02_clincal_data_clean.csv")
PAM50_aug <- read_csv(file = "data/02_PAM50_clean.csv")
proteome_data_aug <- read_csv(file = "data/proteome_data_clean.csv")
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
# Define functions
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
clincal_data_aug <- read_csv(file = "data/02_clincal_data_clean.csv")
PAM50_aug <- read_csv(file = "data/02_PAM50_clean.csv")
proteome_data_aug <- read_csv(file = "data/proteome_data_clean.csv")
View(proteome_data_aug)
View(PAM50_aug)
View(clincal_data_aug)
View(proteome_data_aug)
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
# Define functions (DELETE IF NOT USED)
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
clinical_data <- read_csv(file = "data/_raw/clinical_data_breast_cancer.csv")
PAM50 <- read_csv(file = "data/_raw/PAM50_proteins.csv")
proteome_data <- read_csv(file = "data/_raw/77_cancer_proteomes_CPTAC_itraq.csv")
# Wrangle data
# ------------------------------------------------------------------------------
## Clean PAM50 data
PAM50_clean <- PAM50 %>%
select(-Species) %>% # Remove redundant column
select(RefSeqProteinID, everything()) %>% # ID column first
rename(RefSeq_accession_number = "RefSeqProteinID",
gene_symbol = "GeneSymbol",
gene_name = "Gene Name") # Rename columns to similiar column names as in proteome_data
# There is no NA numbers
colSums(is.na(PAM50_clean))
## Clean proteome data
# identify patient_ID replicates
replicates <- colnames(proteome_data) %>%
str_replace_all(., '\\..*', '') %>% # Simplify ID name
duplicated() %>% # Find replicates (true/false)
colnames(proteome_data)[.] # Extract replicate column names (excluding first apperance)
proteome_data_clean <- proteome_data %>%
select(-gene_symbol, -gene_name) %>% # Remove redundant columns
select(-replicates)  %>% # Remove replicate columns
semi_join(., PAM50_clean, by = "RefSeq_accession_number") %>% # Remove non-PAM50 proteins
rename_all(funs(stringr::str_replace_all(., '\\..*', ''))) %>% # Simplify ID name
pivot_longer(cols = -c("RefSeq_accession_number"),
names_to = "patient_ID",
values_to = "value") %>% # Make proteins (variables) the columns
pivot_wider(names_from = "RefSeq_accession_number",
values_from = "value") #%>% # Make patient_ID (observations) the rows
mutate(patient_ID = factor(patient_ID)) # Factor ID (? I dunno why, did it because Leon does it)
proteome_data_clean <- proteome_data %>%
select(-gene_symbol, -gene_name) %>% # Remove redundant columns
select(-replicates)  %>% # Remove replicate columns
semi_join(., PAM50_clean, by = "RefSeq_accession_number") %>% # Remove non-PAM50 proteins
rename_all(funs(stringr::str_replace_all(., '\\..*', ''))) %>% # Simplify ID name
pivot_longer(cols = -c("RefSeq_accession_number"),
names_to = "patient_ID",
values_to = "value") %>% # Make proteins (variables) the columns
pivot_wider(names_from = "RefSeq_accession_number",
values_from = "value") %>% # Make patient_ID (observations) the rows
mutate(patient_ID = factor(patient_ID)) # Factor ID (? I dunno why, did it because Leon does it)
View(proteome_data_clean)
# Should NAs be replaced with zeroes? Or maybe estimate them with median values?
colSums(is.na(proteome_data_clean))
## Clean clinical data
clinical_data_clean <- clinical_data %>%
mutate(patient_ID = str_remove_all(.$`Complete TCGA ID`, "TCGA-")) %>% # Simplify ID name
select(-`Complete TCGA ID`) %>% # Remove old ID column
semi_join(., proteome_data_clean, by = "patient_ID") %>% # Remove clinical data with no protein information
select(patient_ID, everything()) # ID column first
names(clinical_data_clean) <- gsub(" ", "_", names(clinical_data_clean)) # Remove whitespaces in column names
# There is only NA values in days to date of death for living people
colSums(is.na(clinical_data_clean))
### should we join tables? only if it make sense later...
joined_data <- left_join(clinical_data_clean, proteome_data_clean, by="patient_ID")
# Write data
# ------------------------------------------------------------------------------
write_csv(x = clinical_data_clean,
path = "data/02_clincal_data_clean.csv")
write_csv(x = PAM50_clean,
path = "data/02_PAM50_clean.csv")
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
# Define functions (DELETE IF NOT USED)
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
clinical_data <- read_csv(file = "data/_raw/clinical_data_breast_cancer.csv")
PAM50 <- read_csv(file = "data/_raw/PAM50_proteins.csv")
proteome_data <- read_csv(file = "data/_raw/77_cancer_proteomes_CPTAC_itraq.csv")
# Wrangle data
# ------------------------------------------------------------------------------
## Clean PAM50 data
PAM50_clean <- PAM50 %>%
select(-Species) %>% # Remove redundant column
select(RefSeqProteinID, everything()) %>% # ID column first
rename(RefSeq_accession_number = "RefSeqProteinID",
gene_symbol = "GeneSymbol",
gene_name = "Gene Name") # Rename columns to similiar column names as in proteome_data
# There is no NA numbers
colSums(is.na(PAM50_clean))
## Clean proteome data
# identify patient_ID replicates
replicates <- colnames(proteome_data) %>%
str_replace_all(., '\\..*', '') %>% # Simplify ID name
duplicated() %>% # Find replicates (true/false)
colnames(proteome_data)[.] # Extract replicate column names (excluding first apperance)
proteome_data_clean <- proteome_data %>%
select(-gene_symbol, -gene_name) %>% # Remove redundant columns
select(-replicates)  %>% # Remove replicate columns
semi_join(., PAM50_clean, by = "RefSeq_accession_number") %>% # Remove non-PAM50 proteins
rename_all(funs(stringr::str_replace_all(., '\\..*', ''))) %>% # Simplify ID name
pivot_longer(cols = -c("RefSeq_accession_number"),
names_to = "patient_ID",
values_to = "value") %>% # Make proteins (variables) the columns
pivot_wider(names_from = "RefSeq_accession_number",
values_from = "value") %>% # Make patient_ID (observations) the rows
#mutate(patient_ID = factor(patient_ID)) # Factor ID (? I dunno why, did it because Leon does it)
# Should NAs be replaced with zeroes? Or maybe estimate them with median values?
colSums(is.na(proteome_data_clean))
proteome_data_clean <- proteome_data %>%
select(-gene_symbol, -gene_name) %>% # Remove redundant columns
select(-replicates)  %>% # Remove replicate columns
semi_join(., PAM50_clean, by = "RefSeq_accession_number") %>% # Remove non-PAM50 proteins
rename_all(funs(stringr::str_replace_all(., '\\..*', ''))) %>% # Simplify ID name
pivot_longer(cols = -c("RefSeq_accession_number"),
names_to = "patient_ID",
values_to = "value") %>% # Make proteins (variables) the columns
pivot_wider(names_from = "RefSeq_accession_number",
values_from = "value") #%>% # Make patient_ID (observations) the rows
# Should NAs be replaced with zeroes? Or maybe estimate them with median values?
colSums(is.na(proteome_data_clean))
## Clean clinical data
clinical_data_clean <- clinical_data %>%
mutate(patient_ID = str_remove_all(.$`Complete TCGA ID`, "TCGA-")) %>% # Simplify ID name
select(-`Complete TCGA ID`) %>% # Remove old ID column
semi_join(., proteome_data_clean, by = "patient_ID") %>% # Remove clinical data with no protein information
select(patient_ID, everything()) # ID column first
names(clinical_data_clean) <- gsub(" ", "_", names(clinical_data_clean)) # Remove whitespaces in column names
# There is only NA values in days to date of death for living people
colSums(is.na(clinical_data_clean))
### should we join tables? only if it make sense later...
joined_data <- left_join(clinical_data_clean, proteome_data_clean, by="patient_ID")
# Write data
# ------------------------------------------------------------------------------
write_csv(x = clinical_data_clean,
path = "data/02_clincal_data_clean.csv")
write_csv(x = PAM50_clean,
path = "data/02_PAM50_clean.csv")
write_csv(x = proteome_data_clean,
path = "data/02_proteome_data_clean.csv")
write_csv(x = joined_data,
path = "data/02_joined_data_clean.csv")
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
# Define functions
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
clincal_data_aug <- read_csv(file = "data/02_clincal_data_clean.csv")
PAM50_aug <- read_csv(file = "data/02_PAM50_clean.csv")
proteome_data_aug <- read_csv(file = "data/proteome_data_clean.csv")
View(proteome_data_aug)
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
# Define functions (DELETE IF NOT USED)
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
clinical_data <- read_csv(file = "data/_raw/clinical_data_breast_cancer.csv")
PAM50 <- read_csv(file = "data/_raw/PAM50_proteins.csv")
proteome_data <- read_csv(file = "data/_raw/77_cancer_proteomes_CPTAC_itraq.csv")
# Wrangle data
# ------------------------------------------------------------------------------
## Clean PAM50 data
PAM50_clean <- PAM50 %>%
select(-Species) %>% # Remove redundant column
select(RefSeqProteinID, everything()) %>% # ID column first
rename(RefSeq_accession_number = "RefSeqProteinID",
gene_symbol = "GeneSymbol",
gene_name = "Gene Name") # Rename columns to similiar column names as in proteome_data
# There is no NA numbers
colSums(is.na(PAM50_clean))
## Clean proteome data
# identify patient_ID replicates
replicates <- colnames(proteome_data) %>%
str_replace_all(., '\\..*', '') %>% # Simplify ID name
duplicated() %>% # Find replicates (true/false)
colnames(proteome_data)[.] # Extract replicate column names (excluding first apperance)
proteome_data_clean <- proteome_data %>%
select(-gene_symbol, -gene_name) %>% # Remove redundant columns
select(-replicates)  %>% # Remove replicate columns
semi_join(., PAM50_clean, by = "RefSeq_accession_number") %>% # Remove non-PAM50 proteins
rename_all(funs(stringr::str_replace_all(., '\\..*', ''))) %>% # Simplify ID name
pivot_longer(cols = -c("RefSeq_accession_number"),
names_to = "patient_ID",
values_to = "value") %>% # Make proteins (variables) the columns
pivot_wider(names_from = "RefSeq_accession_number",
values_from = "value") #%>% # Make patient_ID (observations) the rows
# Should NAs be replaced with zeroes? Or maybe estimate them with median values?
colSums(is.na(proteome_data_clean))
## Clean clinical data
clinical_data_clean <- clinical_data %>%
mutate(patient_ID = str_remove_all(.$`Complete TCGA ID`, "TCGA-")) %>% # Simplify ID name
select(-`Complete TCGA ID`) %>% # Remove old ID column
semi_join(., proteome_data_clean, by = "patient_ID") %>% # Remove clinical data with no protein information
select(patient_ID, everything()) # ID column first
names(clinical_data_clean) <- gsub(" ", "_", names(clinical_data_clean)) # Remove whitespaces in column names
# There is only NA values in days to date of death for living people
colSums(is.na(clinical_data_clean))
### should we join tables? only if it make sense later...
joined_data <- left_join(clinical_data_clean, proteome_data_clean, by="patient_ID")
# Write data
# ------------------------------------------------------------------------------
write_csv(x = clinical_data_clean,
path = "data/02_clincal_data_clean.csv")
write_csv(x = PAM50_clean,
path = "data/02_PAM50_clean.csv")
write_csv(x = proteome_data_clean,
path = "data/02_proteome_data_clean.csv")
write_csv(x = joined_data,
path = "data/02_joined_data_clean.csv")
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
# Define functions
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
clincal_data_aug <- read_csv(file = "data/02_clincal_data_clean.csv")
PAM50_aug <- read_csv(file = "data/02_PAM50_clean.csv")
proteome_data_aug <- read_csv(file = "data/02_proteome_data_clean.csv")
View(proteome_data_aug)
View(PAM50_aug)
View(clincal_data_aug)
View(clincal_data_aug)
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
# Define functions
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
clincal_data_aug <- read_csv(file = "data/02_clincal_data_clean.csv")
PAM50_aug <- read_csv(file = "data/02_PAM50_clean.csv")
proteome_data_aug <- read_csv(file = "data/02_proteome_data_clean.csv")
View(proteome_data_aug)
View(clincal_data_aug)
View(PAM50_aug)
# Visualise data
# ------------------------------------------------------------------------------
ggplot(data = clincal_data_aug) +
geom_histogram(mapping = aes(x = `Age at Initial Pathologic Diagnosis`), binwidth = 5)
View(clincal_data_aug)
# Visualise data
# ------------------------------------------------------------------------------
ggplot(data = clincal_data_aug) +
geom_histogram(mapping = aes(x = Age_at_Initial_Pathologic_Diagnosis), binwidth = 5)
ggplot(data = clincal_data_aug, mapping = aes(x = x, y = y)) +
geom_point()
View(clincal_data_aug)
Days_to_Data_of_Last_Contact
ggplot(data = clincal_data_aug, mapping = aes(x = Age_at_Initial_Pathologic_Diagnosis, y = Days_to_Data_of_Last_Contact)) +
geom_point()
ggplot(data = clincal_data_aug, mapping = aes(x = Age_at_Initial_Pathologic_Diagnosis, y = Days_to_Date_of_Last_Contact)) +
geom_point()
View(proteome_data_aug)
ggplot(data = proteome_data_aug, mapping = aes(x = NP_057427, y = NP_999415)) +
geom_point()
ggplot(data = proteome_data_aug, mapping = aes(x = NP_057427, y = NP_002408)) +
geom_point()
View(proteome_data_aug)
# ------------------------------------------------------------------------------
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(center = TRUE, scale = TRUE)
?prcomp
# ------------------------------------------------------------------------------
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(center = TRUE, scale = TRUE, na.action(na.omit))
# ------------------------------------------------------------------------------
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(na.omit(.), center = TRUE, scale = TRUE)
# ------------------------------------------------------------------------------
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(center = TRUE, scale = TRUE, na.action=na.omit)
# ------------------------------------------------------------------------------
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(center = TRUE, scale = TRUE, na.action = na.omit)
# ------------------------------------------------------------------------------
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(center = TRUE, scale = TRUE, na.action = na.omit)
# ------------------------------------------------------------------------------
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(center = TRUE, scale = TRUE)
na.omit(proteome_data_aug)
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
select_if(~sum(!is.na(.)) > 0)  %>%
prcomp(center = TRUE, scale = TRUE)
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
select_if(~sum(!is.na(.)) > 0)
proteome_pca
View(proteome_pca)
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
select_if(~sum(!is.na(.)) < 0)
# ------------------------------------------------------------------------------
proteome_data_aug$value[is.na(proteome_data_aug$value)] <- median(proteome_data_aug$value, na.rm=TRUE)
# ------------------------------------------------------------------------------
ddply(proteome_data_aug,
.(months),
transform,
value=ifelse(is.na(value), median(value, na.rm=TRUE), value))
# ------------------------------------------------------------------------------
df %>%
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
mutate_all(~ifelse(is.na(.), median(., na.rm = TRUE), .)) %>%
prcomp(center = TRUE, scale = TRUE)
# ------------------------------------------------------------------------------
proteome_data_aug %>%
mutate_all(~ifelse(is.na(.), median(., na.rm = TRUE), .))
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(center = TRUE, scale = TRUE)
View(proteome_data_aug)
proteome_data_aug %>%
mutate_all(~ifelse(is.na(.), median(., na.rm = TRUE), .))
proteome_data_aug <- proteome_data_aug %>%
mutate_all(~ifelse(is.na(.), median(., na.rm = TRUE), .))
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
prcomp(center = TRUE, scale = TRUE)
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
mutate_all(~ifelse(is.na(.), median(., na.rm = TRUE), .)) %>%
prcomp(center = TRUE, scale = TRUE)
proteome_data_aug <- read_csv(file = "data/02_proteome_data_clean.csv")
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
mutate_all(~ifelse(is.na(.), median(., na.rm = TRUE), .)) %>%
prcomp(center = TRUE, scale = TRUE)
proteome_pca %>%
tidy("pcs") %>%
ggplot(aes(x = PC, y = percent)) +
geom_col() +
theme_bw()
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
# Define functions
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
clincal_data_aug <- read_csv(file = "data/02_clincal_data_clean.csv")
PAM50_aug <- read_csv(file = "data/02_PAM50_clean.csv")
proteome_data_aug <- read_csv(file = "data/02_proteome_data_clean.csv")
# Wrangle data
# ------------------------------------------------------------------------------
my_data_clean_aug %>% ...
# Model data
# ------------------------------------------------------------------------------
my_data_clean_aug %>% ...
# Visualise data
# ------------------------------------------------------------------------------
ggplot(data = clincal_data_aug) +
geom_histogram(mapping = aes(x = Age_at_Initial_Pathologic_Diagnosis), binwidth = 5)
ggplot(data = clincal_data_aug, mapping = aes(x = Age_at_Initial_Pathologic_Diagnosis, y = Days_to_Date_of_Last_Contact)) +
geom_point()
ggplot(data = proteome_data_aug, mapping = aes(x = NP_057427, y = NP_002408)) +
geom_point()
# ------------------------------------------------------------------------------
proteome_pca <- proteome_data_aug %>%
select(-patient_ID) %>%
mutate_all(~ifelse(is.na(.), median(., na.rm = TRUE), .)) %>%
prcomp(center = TRUE, scale = TRUE)
proteome_pca %>%
tidy("pcs") %>%
ggplot(aes(x = PC, y = percent)) +
geom_col() +
theme_bw()
proteome_pca
View(proteome_pca)
proteome_pca %>%
ggplot(aes(x = PC, y = percent)) +
geom_col() +
theme_bw()
View(proteome_pca)
proteome_pca
proteome_pca_aug <- proteome_pca %>%
augment(proteome_data_aug)
proteome_pca %>%
tidy("pcs") %>%
ggplot(aes(x = PC, y = percent)) +
geom_col() +
theme_bw()
tidyverse_update(recursive = FALSE, repos = getOption("repos"))
install.packages(c("broom", "dplyr", "forcats", "ggplot2", "hms", "jsonlite",
"lubridate", "modelr", "pillar", "rlang", "tibble", "tidyr",
"xml2"))
install.packages(c("broom", "dplyr", "forcats", "ggplot2", "hms", "jsonlite", "lubridate", "modelr", "pillar", "rlang", "tibble", "tidyr", "xml2"))
install.packages(c("broom", "dplyr", "forcats", "ggplot2", "hms", "jsonlite", "lubridate", "modelr", "pillar", "rlang", "tibble", "tidyr", "xml2"))
install.packages(c("broom", "dplyr", "forcats", "ggplot2", "hms", "jsonlite", "lubridate", "modelr", "pillar", "rlang", "tibble", "tidyr", "xml2"))
install.packages(c("broom", "dplyr", "forcats", "ggplot2", "hms", "jsonlite",
"lubridate", "modelr", "pillar", "rlang", "tibble", "tidyr",
"xml2"))
install.packages(c("broom", "dplyr", "forcats", "ggplot2", "hms", "jsonlite", "lubridate", "modelr", "pillar", "rlang", "tibble", "tidyr", "xml2"))

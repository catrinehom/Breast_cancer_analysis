p.table$signif <-  ifelse(p.table$p.value < 0.01, "**", ifelse(p.table$p.value < 0.05, "*", "") )
p.table
}
fisher.pretty <- function(x, y) {
fisher.test(x, y)[c("p.value", "estimate")] %>%
unlist %>%
set_names(c("p.value", "odds.ratio"))
}
rankBiserialCorrelation <- function (x, group) {
stopifnot(length(x) == length(group))
group.int <- as.integer(factor(group))
nLevels <- max(0, group.int)
stopifnot(nLevels <= 2)
if(nLevels < 2) {
return(NA)
} else {
r <- rank(x)[group.int == 2]
n1 <- sum(group.int == 1)
n2 <- sum(group.int == 2)
auc <- (sum(r) - (n2 * (n2 + 1)/2))/(n1 * n2)
return((2 * auc) - 1)
}
}
wilcox.pretty <- function(x, group, ...) {
stopifnot(length(x) == length(group))
group.int <- as.integer(factor(group))
p <- wilcox.exact(x[group.int == 1], x[group.int == 2], paired = FALSE)$p.value %>% set_names("p.value")
#  p <- wilcox.test(formula, ...)$p.value %>% set_names("p.value")
rrb <- rankBiserialCorrelation(x, group) %>% set_names("rrb")
return(c(p, rrb))
}
kruskal.pretty <- function(x, y) {
kruskal.test(x, y)[c("p.value", "statistic")] %>% unlist() %>% set_names(c("p.value", "chi-squared"))
}
glm.logistic <- function(formula, data) {
glm(formula, family = binomial(link='logit'), data = data) %>% anova(test="Chisq")
}
# Number of samples from each study
table(meta$study, useNA = "ifany")
rhpdan_meta <- cm.read("rdata/rhpdan_meta.rds")
meta <- rhpdan_meta$meta
rhpdan_meta_transf <- cm.read("rdata/rhpdan_meta_df_with_transformedAbundances.rds")
meta_transf <- rhpdan_meta_transf$meta
View(meta)
View(rhpdan_meta_transf)
meta_transf <- cm.read("rdata/rhpdan_meta_df_with_transformedAbundances.rds")
rm(rhpdan_meta_transf)
View(meta_transf)
View(meta)
meta <- cm.read("rdata/rhpdan_meta_df_with_transformedAbundances.rds")
rm(meta_transf)
# Number of samples from each study
table(meta$study, useNA = "ifany")
# Number of samples from each disease category
table(meta$category, useNA = "ifany")
str(meta)
# Number of samples from each metadata group
table(meta$smoking, useNA = "ifany")
table(meta$lithium, useNA = "ifany")
table(is.na(meta$waist.circumference))
quantile(meta$waist.circumference, na.rm = TRUE)
table(meta$anticonvolsant, useNA = "ifany")
table(meta$antidepressant, useNA = "ifany")
table(meta$antipsychotic, useNA = "ifany")
meta$category <- factor(meta$category, levels = c("Healthy control", "High-risk", "Affected"))
# Convert abundance to presence/absence
meta$christensenellaceae.rar.present <- ifelse(meta$christensenellaceae.rar > 0, "Present", "Absent")
meta$flavonifractor.rar.present      <- ifelse(meta$flavonifractor.rar > 0, "Present", "Absent")
meta$Affected <- meta$category == "Affected"
meta$Healthy <- meta$category == "Healthy control"
meta$Highrisk <- meta$category == "High-risk"
meta$medicine <-  meta %>% select(anticonvolsant, antidepressant, antipsychotic, lithium) %>% equals("Yes") %>% rowSums() %>% is_greater_than(0)
table(meta$medicine, useNA = "ifany")
5+4+2+5+5+6+2+2+2+4+3+7+4+2+4+5+6+3+1
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library(tidyverse)
library(broom)
library(patchwork)
library(RColorBrewer)
# Define functions
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
joined_data_aug <- read_csv(file = "data/02_joined_data_PAM50_aug.csv")
# Wrangle data
# ------------------------------------------------------------------------------
# Remove healthy control samples
joined_data_aug <- joined_data_aug %>%
filter(Class != "Control")
proteome_data <- joined_data_aug %>%
# select only proteome-count columns
select(starts_with("NP"))
# PCA
# ---------------------------------------------------------------------------
## Compute PCA
pca <- proteome_data %>%
prcomp(center = TRUE, scale = TRUE)
## Scree plot
pca %>%
tidy("pcs") %>%
ggplot(aes(x = PC, y = percent)) +
geom_col() +
labs(title = "Scree plot: PCA proteome data",
x = "Principal components",
y = "variance explained (%)") +
theme(base_size = 18,
plot.title = element_text(hjust = 1.5, size = 25)) +
theme_bw() +
scale_y_continuous(labels = scales::percent) + myplot_aes
ggsave(filename = "results/05_scree_plot.png", device = "png",
height = 5)
## Augment and add y class
proteome_pca_aug <- pca %>%
augment(proteome_data) %>%
mutate(Class = factor(joined_data_aug$Class, levels = c("Basal", "HER2", "LumA", "LumB")))
## Get PC percent
PC1_perc <- pca %>%
tidy("pcs") %>%
filter(PC==1) %>%
pull(percent)
PC2_perc <- pca %>%
tidy("pcs") %>%
filter(PC==2) %>%
pull(percent)
## Scatter proteome data - PC1/PC2
proteome_pca_aug %>%
ggplot(aes(x = .fittedPC1, y = .fittedPC2, colour = Class)) +
geom_point(size = 3) +
labs(title = "PCA plot of proteome data",
x = str_c("PC1 (", round(PC1_perc * 100, 2), "%)" ),
y = str_c("PC2 (", round(PC2_perc * 100, 2), "%)")) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
myplot_aes
ggsave(filename = "results/05_PCA.png",
device = "png",
height = 5)
# K-means clustering
# ------------------------------------------------------------------------------
k = n_levels # 4 levels
### Clustering on original data
set.seed(12)
cluster_original <- proteome_data %>%
kmeans(centers = k)
### Augment to PCA data
proteome_pca_cluster_aug <-
cluster_original %>%
broom::augment (proteome_pca_aug) %>%
rename(cluster_original = .cluster)
### Clustering on dimensionality-reduced data (2 first PCs)
cluster_pca <- proteome_pca_aug %>%
select(.fittedPC1, .fittedPC2) %>%
kmeans(centers = k)
### Augment to PCA/kmeans data
proteome_pca_cluster_aug <-
cluster_pca %>%
broom::augment (proteome_pca_cluster_aug) %>%
rename(cluster_pca = .cluster)
# Which clustering technique performs better
# ------------------------------------------------------------------------------
accuracy <- proteome_pca_cluster_aug %>%
select(Class, cluster_original, cluster_pca) %>%
mutate(cluster_original = case_when(cluster_original == 1 ~ "HER2",
cluster_original == 2 ~ "LumA",
cluster_original == 3 ~ "LumB",
cluster_original == 4 ~ "Basal"),
cluster_pca = case_when(cluster_pca == 1 ~ "LumA",
cluster_pca == 2 ~ "Basal",
cluster_pca == 3 ~ "HER2",
cluster_pca == 4 ~ "LumB"),
cluster_original_correct = case_when(Class == cluster_original ~ 1,
Class != cluster_original ~ 0),
cluster_pca_correct = case_when(Class == cluster_pca ~ 1,
Class != cluster_pca ~ 0)) %>%
summarise(score_original = mean(cluster_original_correct) * 100,
score_pca = mean(cluster_pca_correct) * 100)
# Visualization of clusters on PCs
# ------------------------------------------------------------------------------
### Original classes
plot1 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = Class)) +
geom_point(size=3) +
labs(title = "Original data",
x = 'PC1',
y = 'PC2',
colour = "True class") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text (size = 14),
legend.text = element_text (size = 10),
legend.key.size = unit (0.1, "cm")) +
guides(colour = guide_legend( title.position = "top",
nrow = 2,
byrow = TRUE)) + myplot_aes
### Clusters on original data
plot2 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_original)) +
geom_point(size=3) +
labs(title = "Clusters on original data",
subtitle = paste0("accuracy = ", round(accuracy[[1]], 1), "%"),
x = 'PC1',
y = 'PC2',
colour = "clusters") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.key.size = unit(0.1,"cm")) +
guides(colour = guide_legend(title.position="top")) + myplot_aes
### Clusters on dimensionality-reduced data (first 2 PCs)
plot3 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_pca)) +
geom_point(size=3) +
labs(title = "Clusters on PCA data",
subtitle = paste0("accuracy = ", round(accuracy[[2]], 1), "%"),
x = 'PC1',
y = 'PC2',
colour = "clusters") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.key.size = unit(0.1,"cm")) +
guides(colour = guide_legend(title.position="top")) + myplot_aes
(plot1 + plot2 + plot3)
ggsave(filename = "results/05_PCA_kmeans.png", device = "png",
height = 5)
setwd("C:/Users/paula/Desktop/R_repo/2020_group07/R")
setwd(..)
setwd("..")
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library(tidyverse)
library(broom)
library(patchwork)
library(RColorBrewer)
# Define functions
# ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
joined_data_aug <- read_csv(file = "data/02_joined_data_PAM50_aug.csv")
# Wrangle data
# ------------------------------------------------------------------------------
# Remove healthy control samples
joined_data_aug <- joined_data_aug %>%
filter(Class != "Control")
proteome_data <- joined_data_aug %>%
# select only proteome-count columns
select(starts_with("NP"))
# PCA
# ---------------------------------------------------------------------------
## Compute PCA
pca <- proteome_data %>%
prcomp(center = TRUE, scale = TRUE)
## Scree plot
pca %>%
tidy("pcs") %>%
ggplot(aes(x = PC, y = percent)) +
geom_col() +
labs(title = "Scree plot: PCA proteome data",
x = "Principal components",
y = "variance explained (%)") +
theme(base_size = 18,
plot.title = element_text(hjust = 1.5, size = 25)) +
theme_bw() +
scale_y_continuous(labels = scales::percent) + myplot_aes
ggsave(filename = "results/05_scree_plot.png", device = "png",
height = 5)
## Augment and add y class
proteome_pca_aug <- pca %>%
augment(proteome_data) %>%
mutate(Class = factor(joined_data_aug$Class, levels = c("Basal", "HER2", "LumA", "LumB")))
## Get PC percent
PC1_perc <- pca %>%
tidy("pcs") %>%
filter(PC==1) %>%
pull(percent)
PC2_perc <- pca %>%
tidy("pcs") %>%
filter(PC==2) %>%
pull(percent)
## Scatter proteome data - PC1/PC2
proteome_pca_aug %>%
ggplot(aes(x = .fittedPC1, y = .fittedPC2, colour = Class)) +
geom_point(size = 3) +
labs(title = "PCA plot of proteome data",
x = str_c("PC1 (", round(PC1_perc * 100, 2), "%)" ),
y = str_c("PC2 (", round(PC2_perc * 100, 2), "%)")) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
myplot_aes
ggsave(filename = "results/05_PCA.png",
device = "png",
height = 5)
# K-means clustering
# ------------------------------------------------------------------------------
k = n_levels # 4 levels
### Clustering on original data
set.seed(12)
cluster_original <- proteome_data %>%
kmeans(centers = k)
### Augment to PCA data
proteome_pca_cluster_aug <-
cluster_original %>%
broom::augment (proteome_pca_aug) %>%
rename(cluster_original = .cluster)
### Clustering on dimensionality-reduced data (2 first PCs)
cluster_pca <- proteome_pca_aug %>%
select(.fittedPC1, .fittedPC2) %>%
kmeans(centers = k)
### Augment to PCA/kmeans data
proteome_pca_cluster_aug <-
cluster_pca %>%
broom::augment (proteome_pca_cluster_aug) %>%
rename(cluster_pca = .cluster)
accuracy <- proteome_pca_cluster_aug %>%
select(Class, cluster_original, cluster_pca) %>%
mutate(cluster_original = case_when(cluster_original == 1 ~ "HER2",
cluster_original == 2 ~ "LumA",
cluster_original == 3 ~ "LumB",
cluster_original == 4 ~ "Basal"),
cluster_pca = case_when(cluster_pca == 1 ~ "LumA",
cluster_pca == 2 ~ "Basal",
cluster_pca == 3 ~ "HER2",
cluster_pca == 4 ~ "LumB"),
cluster_original_correct = case_when(Class == cluster_original ~ 1,
Class != cluster_original ~ 0),
cluster_pca_correct = case_when(Class == cluster_pca ~ 1,
Class != cluster_pca ~ 0)) %>%
summarise(score_original = mean(cluster_original_correct) * 100,
score_pca = mean(cluster_pca_correct) * 100)
# Visualization of clusters on PCs
# ------------------------------------------------------------------------------
### Original classes
plot1 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = Class)) +
geom_point(size=3) +
labs(title = "Original data",
x = 'PC1',
y = 'PC2',
colour = "True class") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text (size = 14),
legend.text = element_text (size = 10),
legend.key.size = unit (0.1, "cm")) +
guides(colour = guide_legend( title.position = "top",
nrow = 2,
byrow = TRUE)) + myplot_aes
### Clusters on original data
plot2 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_original)) +
geom_point(size=3) +
labs(title = "Clusters on original data",
subtitle = paste0("accuracy = ", round(accuracy[[1]], 1), "%"),
x = 'PC1',
y = 'PC2',
colour = "clusters") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.key.size = unit(0.1,"cm")) +
guides(colour = guide_legend(title.position="top")) + myplot_aes
### Clusters on dimensionality-reduced data (first 2 PCs)
plot3 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_pca)) +
geom_point(size=3) +
labs(title = "Clusters on PCA data",
subtitle = paste0("accuracy = ", round(accuracy[[2]], 1), "%"),
x = 'PC1',
y = 'PC2',
colour = "clusters") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.key.size = unit(0.1,"cm")) +
guides(colour = guide_legend(title.position="top")) + myplot_aes
(plot1 + plot2 + plot3)
ggsave(filename = "results/05_PCA_kmeans.png", device = "png",
height = 5)
# K-means clustering
# ------------------------------------------------------------------------------
k = 4 # 4 levels
### Clustering on original data
set.seed(12)
cluster_original <- proteome_data %>%
kmeans(centers = k)
### Augment to PCA data
proteome_pca_cluster_aug <-
cluster_original %>%
broom::augment (proteome_pca_aug) %>%
rename(cluster_original = .cluster)
### Clustering on dimensionality-reduced data (2 first PCs)
cluster_pca <- proteome_pca_aug %>%
select(.fittedPC1, .fittedPC2) %>%
kmeans(centers = k)
### Augment to PCA/kmeans data
proteome_pca_cluster_aug <-
cluster_pca %>%
broom::augment (proteome_pca_cluster_aug) %>%
rename(cluster_pca = .cluster)
accuracy <- proteome_pca_cluster_aug %>%
select(Class, cluster_original, cluster_pca) %>%
mutate(cluster_original = case_when(cluster_original == 1 ~ "HER2",
cluster_original == 2 ~ "LumA",
cluster_original == 3 ~ "LumB",
cluster_original == 4 ~ "Basal"),
cluster_pca = case_when(cluster_pca == 1 ~ "LumA",
cluster_pca == 2 ~ "Basal",
cluster_pca == 3 ~ "HER2",
cluster_pca == 4 ~ "LumB"),
cluster_original_correct = case_when(Class == cluster_original ~ 1,
Class != cluster_original ~ 0),
cluster_pca_correct = case_when(Class == cluster_pca ~ 1,
Class != cluster_pca ~ 0)) %>%
summarise(score_original = mean(cluster_original_correct) * 100,
score_pca = mean(cluster_pca_correct) * 100)
# Visualization of clusters on PCs
# ------------------------------------------------------------------------------
### Original classes
plot1 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = Class)) +
geom_point(size=3) +
labs(title = "Original data",
x = 'PC1',
y = 'PC2',
colour = "True class") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text (size = 14),
legend.text = element_text (size = 10),
legend.key.size = unit (0.1, "cm")) +
guides(colour = guide_legend( title.position = "top",
nrow = 2,
byrow = TRUE)) + myplot_aes
### Clusters on original data
plot2 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_original)) +
geom_point(size=3) +
labs(title = "Clusters on original data",
subtitle = paste0("accuracy = ", round(accuracy[[1]], 1), "%"),
x = 'PC1',
y = 'PC2',
colour = "clusters") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.key.size = unit(0.1,"cm")) +
guides(colour = guide_legend(title.position="top")) + myplot_aes
### Clusters on dimensionality-reduced data (first 2 PCs)
plot3 <- proteome_pca_cluster_aug %>%
ggplot(aes(x = .fittedPC1,
y = .fittedPC2,
colour = cluster_pca)) +
geom_point(size=3) +
labs(title = "Clusters on PCA data",
subtitle = paste0("accuracy = ", round(accuracy[[2]], 1), "%"),
x = 'PC1',
y = 'PC2',
colour = "clusters") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, size = 10),
legend.position = "bottom",
legend.title.align = 0.5,
legend.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.key.size = unit(0.1,"cm")) +
guides(colour = guide_legend(title.position="top")) + myplot_aes
(plot1 + plot2 + plot3)
ggsave(filename = "results/05_PCA_kmeans.png", device = "png",
height = 5)
